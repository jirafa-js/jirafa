@use 'sass:map';
@use 'sass:math';
@use '../settings' as *;
@use '../tools' as *;

$button-height: $height-size-base !default;
$button-font-size: $font-size-base !default;
$button-width-ratio: 2 !default;
$button-padding-ratio: 2.25 !default;

$button-sizes: () !default;
$button-sizes: map.merge(
  (
    'height': $button-height,
    'font-size': $button-font-size,
    'width-ratio': $button-width-ratio,
    'padding-ratio': $button-padding-ratio,
  ),
  $button-sizes
);
$button-font-weight: map.get($font-weights, 'regular');

$button-border-radius: $border-radius-root;
$button-border-color: get-css-var('button', 'border-color') !default;
$button-border-style: solid !default;
$button-border-width: 1px !default;
$button-border: (
  $button-border-color,
  $button-border-style,
  $button-border-width
) !default;

$button-status: () !default;
$button-status: map.merge(
  (
    '': (
      get-css-var('color', 'primary'),
      get-css-var('text-color', 'regular'),
    ),
    'success': (
      get-css-var('color', 'success'),
    ),
    'warning': (
      get-css-var('color', 'warning'),
    ),
    'danger': (
      get-css-var('color', 'danger'),
    ),
  ),
  $button-status
);

$button-vars: () !default;
$button-vars: map.merge(
  (
    'overlay-opacity': 0,
    'outline-color': currentColor,
  ),
  $button-vars
);

@mixin button-size($map: $button-sizes) {
  @include sizes();
  @each $size in $sizes {
    @include m($size) {
      min-width: roundEven(
        get-size-val(null, height, $size) * map.get($map, 'width-ratio')
      );
    }
  }
  // @each $sizeName, $multiplier in $size-scales {
  //   $size: roundEven(map.get($map, 'font-size') + $multiplier);
  //   $height: map.get($map, 'height') + (4 * $multiplier);

  //   @include m(if($sizeName == 'default', '', $sizeName)) {
  //     --j-button-font-size: #{$size};
  //     --j-button-height: #{$height};
  //     min-width: roundEven($height * map.get($map, 'width-ratio'));
  //     padding: 0 roundEven(math.div($height, map.get($map, 'padding-ratio')));
  //   }
  // }
}

@mixin button-status($status: $button-status) {
  @each $type, $colors in $status {
    @include m($type) {
      @include button-variant($colors...);
    }
  }
}

@mixin button-variant($color1, $color2: $color1) {
  &.#{b('button')} {
    @include m('primary') {
      @include set-css-var(('button', 'outline-color'), $color1);
      @include set-css-var(('button', 'bg-color'), $color1);
      @include set-css-var(
        ('button', 'text-color'),
        get-css-var('color-white')
      );
      @include set-css-var(('button', 'border-color'), $color1);
    }
    @include m('outline', 'text', 'secondary', 'dashed') {
      @include set-css-var(('button', 'bg-color'), transparent);
    }

    @include m('secondary') {
      @include set-css-var(('button', 'text-color'), $color2);
      @include set-css-var(('button', 'border-color'), transparent);
    }

    @include m('outline') {
      @include set-css-var(('button', 'text-color'), $color1);
      @include set-css-var(('button', 'border-color'), $color1);
    }

    @include m('dashed') {
      border-style: dashed;
      @include set-css-var(('button', 'text-color'), $color2);
      @include set-css-var(('button', 'border-color'), $color2);
    }

    @include m('text') {
      @include set-css-var(('button', 'text-color'), $color1);
      @include set-css-var(('button', 'border-color'), transparent);
    }
  }
}
