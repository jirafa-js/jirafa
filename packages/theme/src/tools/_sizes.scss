@use 'sass:meta';
@use 'sass:list';
@use 'sass:map';
@use 'sass:math';
@use './bem' as *;
@use './css-var' as *;
@use './functions' as *;
@use '../settings/sizes' as *;

@mixin sizes(
  $sizes-values: null,
  $sizes-keys: map.keys($sizes-provide),
  $name: $BN
) {
  @each $size in $sizes {
    @include m($size) {
      @each $key in $sizes-keys {
        $value: get-size-val($sizes-values, $key, $size);
        @if ($value != null) {
          @include set-css-var(
            ($name, $key),
            get-size-val($sizes-values, $key, $size)
          );
        }
      }
      @content ($size);
    }
  }
}

@function get-size-val($values, $key, $size) {
  $value: map.get($sizes-provide, $key, $size);
  @if (meta.type-of($values) == map) {
    $p-value: map.get($values, $key, $size);
    @if ($p-value != null) {
      $value: $p-value;
    }
  }

  @if ($value == null) {
    @warn 'sizes do not provide the value of key[#{quote($key)}] or size[#{quote($size)}]';
  }

  @return $value;
}

@function create-padding-sizes($ratio, $height: $height-sizes) {
  $sizes: ();
  @each $size, $value in $height {
    $sizes: map.merge(
      (#{$size}: #{roundEven(math.div($value, $ratio))}),
      $sizes
    );
  }
  @return $sizes;
}

@function create-sizes($sizes, $base) {
  $_sizes: ();
  $_base: map.get($sizes, '');

  @each $size, $height in $sizes {
    $_sizes: map.merge(
      (
        $size: $height - $_base + $base,
      ),
      $_sizes
    );
  }

  @return $_sizes;
}
